// adt.js : Algebraic data types and immutable structures in Javascript
// Nathan Faubion <nathan@n-son.com>
(function(e,t){var n={};e.adt=t.exports=n,n.util={};var r=Array.prototype.slice;n.util.toArray=function(e){return r.call(e)},n.util.extend=function(e){var t=r.call(arguments,1);for(var n=0,i=t.length;n<i;n++)for(var s in t[n])e[s]=t[n][s];return e},n.util.ctrApply=function(e,t){var n=function(){};n.prototype=e.prototype;var r=new n,i=e.apply(r,t);return Object(i)===i?i:r},n.util.partial=function(e){var t=r.call(arguments,1);return function(){return e.apply(this,t.concat(n.util.toArray(arguments)))}},n.util.curry=function(e,t){return t===undefined&&(t=e.length),function(){var r=n.util.toArray(arguments);if(r.length<t){var i=n.util.partial.apply(this,[e].concat(r));return t-r.length>0?n.util.curry(i,t-r.length):i}return e.apply(this,r)}},n.__Base__=function(){},n.data=function(e){var t=function(){};t.prototype=new n.__Base__;for(var r in e)(function(r){var i=e[r],s=i.prototype;i.prototype=new t,i.prototype.constructor=i,i.className=r;for(var o in e)i.prototype["is"+o]=o===r?function(){return!0}:function(){return!1};n.util.extend(i.prototype,s),t[r]=i})(r);return t},n.single=function(){var e,t;return t=function(){if(!(this instanceof t))return new t;if(e)return e;e=this},t.prototype=new n.__Base__,t.prototype=t,t.prototype.clone=function(){return e},t.create=function(){return t()},t.unapply=function(){return[]},t.unapplyObj=function(){return{}},t},n.record=function(){var e=n.util.toArray(arguments),t;return t=function(){var r=n.util.toArray(arguments);if(!(this instanceof t))return n.util.ctrApply(t,r);if(r.length>e.length)throw new Error("Constructor applied to too many arguments");for(var i=0,s=r.length;i<s;i++)this["_"+e[i]]=r[i]},t=n.util.curry(t,e.length),t.names=e.slice(),t.prototype=new n.__Base__,t.prototype.constructor=t,t.prototype.clone=function(){var r=this,i=e.map(function(e){var t=r["_"+e];return e instanceof n.__Base__?t.clone():t});return t.apply(null,i)},t.prototype.slot=function(t){if(t<0||t>e.length-1)throw new Error("Slot index out of range");return this[e[t]]()},t.prototype.set=function(r){var i=this,s=e.map(function(e){var t=e in r?r[e]:i["_"+e];return e instanceof n.__Base__?t.clone():t});return t.apply(null,s)},t.create=function(r){var i=e.map(function(e){if(e in r){var t=r[e];return e instanceof n.__Base__?t.clone():t}throw new Error("Constructor applied to too few arguments")});return t.apply(null,i)},t.unapply=function(t){return e.map(function(e){return t[e]()})},t.unapplyObj=function(t){var n={};return e.forEach(function(e){n[e]=t[e]()}),n},e.forEach(function(e){t.prototype[e]=function(){return this["_"+e]}}),t}})(typeof window!="undefined"?window:{},typeof module!="undefined"?module:{});